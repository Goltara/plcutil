# Autogenerated from a Treetop grammar. Edits may be lost.


module Awl
  include Treetop::Runtime

  def root
    @root ||= :toplevel
  end

  def _nt_toplevel
    start_index = index
    if node_cache[:toplevel].has_key?(index)
      cached = node_cache[:toplevel][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      r2 = _nt_udt
      if r2
        r1 = r2
      else
        r3 = _nt_db
        if r3
          r1 = r3
        else
          r4 = _nt_ob
          if r4
            r1 = r4
          else
            @index = i1
            r1 = nil
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:toplevel][start_index] = r0

    r0
  end

  module Db0
    def name
      elements[1]
    end

    def eol1
      elements[2]
    end

    def title
      elements[4]
    end

    def eol2
      elements[5]
    end

    def version
      elements[7]
    end

    def eol3
      elements[8]
    end

    def ws_eol1
      elements[9]
    end

    def ws1
      elements[10]
    end

    def eol4
      elements[12]
    end

    def ws2
      elements[14]
    end

    def ws3
      elements[16]
    end

    def eol5
      elements[21]
    end

    def ws_eol2
      elements[22]
    end
  end

  def _nt_db
    start_index = index
    if node_cache[:db].has_key?(index)
      cached = node_cache[:db][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('DATA_BLOCK ', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 11))
      @index += 11
    else
      terminal_parse_failure('DATA_BLOCK ')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_name
      s0 << r2
      if r2
        r3 = _nt_eol
        s0 << r3
        if r3
          if has_terminal?('TITLE : ', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 8))
            @index += 8
          else
            terminal_parse_failure('TITLE : ')
            r4 = nil
          end
          s0 << r4
          if r4
            r5 = _nt_title
            s0 << r5
            if r5
              r6 = _nt_eol
              s0 << r6
              if r6
                if has_terminal?('VERSION : ', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 10))
                  @index += 10
                else
                  terminal_parse_failure('VERSION : ')
                  r7 = nil
                end
                s0 << r7
                if r7
                  r8 = _nt_version
                  s0 << r8
                  if r8
                    r9 = _nt_eol
                    s0 << r9
                    if r9
                      r10 = _nt_ws_eol
                      s0 << r10
                      if r10
                        r11 = _nt_ws
                        s0 << r11
                        if r11
                          if has_terminal?('STRUCT', false, index)
                            r12 = instantiate_node(SyntaxNode,input, index...(index + 6))
                            @index += 6
                          else
                            terminal_parse_failure('STRUCT')
                            r12 = nil
                          end
                          s0 << r12
                          if r12
                            r13 = _nt_eol
                            s0 << r13
                            if r13
                              s14, i14 = [], index
                              loop do
                                r15 = _nt_declaration
                                if r15
                                  s14 << r15
                                else
                                  break
                                end
                              end
                              r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
                              s0 << r14
                              if r14
                                r16 = _nt_ws
                                s0 << r16
                                if r16
                                  if has_terminal?('END_STRUCT', false, index)
                                    r17 = instantiate_node(SyntaxNode,input, index...(index + 10))
                                    @index += 10
                                  else
                                    terminal_parse_failure('END_STRUCT')
                                    r17 = nil
                                  end
                                  s0 << r17
                                  if r17
                                    r18 = _nt_ws
                                    s0 << r18
                                    if r18
                                      if has_terminal?(';', false, index)
                                        r19 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                        @index += 1
                                      else
                                        terminal_parse_failure(';')
                                        r19 = nil
                                      end
                                      s0 << r19
                                      if r19
                                        if has_terminal?('BEGIN', false, index)
                                          r20 = instantiate_node(SyntaxNode,input, index...(index + 5))
                                          @index += 5
                                        else
                                          terminal_parse_failure('BEGIN')
                                          r20 = nil
                                        end
                                        s0 << r20
                                        if r20
                                          s21, i21 = [], index
                                          loop do
                                            r22 = _nt_assignment
                                            if r22
                                              s21 << r22
                                            else
                                              break
                                            end
                                          end
                                          r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
                                          s0 << r21
                                          if r21
                                            if has_terminal?('END_DATA_BLOCK', false, index)
                                              r23 = instantiate_node(SyntaxNode,input, index...(index + 14))
                                              @index += 14
                                            else
                                              terminal_parse_failure('END_DATA_BLOCK')
                                              r23 = nil
                                            end
                                            s0 << r23
                                            if r23
                                              r24 = _nt_eol
                                              s0 << r24
                                              if r24
                                                r25 = _nt_ws_eol
                                                s0 << r25
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Db0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:db][start_index] = r0

    r0
  end

  module Udt0
    def name
      elements[1]
    end

    def eol1
      elements[2]
    end

    def version
      elements[4]
    end

    def eol2
      elements[5]
    end

    def ws_eol1
      elements[6]
    end

    def ws1
      elements[7]
    end

    def eol3
      elements[9]
    end

    def ws2
      elements[11]
    end

    def ws3
      elements[13]
    end

    def eol4
      elements[16]
    end

    def ws_eol2
      elements[17]
    end
  end

  def _nt_udt
    start_index = index
    if node_cache[:udt].has_key?(index)
      cached = node_cache[:udt][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('TYPE ', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('TYPE ')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_name
      s0 << r2
      if r2
        r3 = _nt_eol
        s0 << r3
        if r3
          if has_terminal?('VERSION : ', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 10))
            @index += 10
          else
            terminal_parse_failure('VERSION : ')
            r4 = nil
          end
          s0 << r4
          if r4
            r5 = _nt_version
            s0 << r5
            if r5
              r6 = _nt_eol
              s0 << r6
              if r6
                r7 = _nt_ws_eol
                s0 << r7
                if r7
                  r8 = _nt_ws
                  s0 << r8
                  if r8
                    if has_terminal?('STRUCT', false, index)
                      r9 = instantiate_node(SyntaxNode,input, index...(index + 6))
                      @index += 6
                    else
                      terminal_parse_failure('STRUCT')
                      r9 = nil
                    end
                    s0 << r9
                    if r9
                      r10 = _nt_eol
                      s0 << r10
                      if r10
                        s11, i11 = [], index
                        loop do
                          r12 = _nt_declaration
                          if r12
                            s11 << r12
                          else
                            break
                          end
                        end
                        r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                        s0 << r11
                        if r11
                          r13 = _nt_ws
                          s0 << r13
                          if r13
                            if has_terminal?('END_STRUCT', false, index)
                              r14 = instantiate_node(SyntaxNode,input, index...(index + 10))
                              @index += 10
                            else
                              terminal_parse_failure('END_STRUCT')
                              r14 = nil
                            end
                            s0 << r14
                            if r14
                              r15 = _nt_ws
                              s0 << r15
                              if r15
                                if has_terminal?(';', false, index)
                                  r16 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                  @index += 1
                                else
                                  terminal_parse_failure(';')
                                  r16 = nil
                                end
                                s0 << r16
                                if r16
                                  if has_terminal?('END_TYPE', false, index)
                                    r17 = instantiate_node(SyntaxNode,input, index...(index + 8))
                                    @index += 8
                                  else
                                    terminal_parse_failure('END_TYPE')
                                    r17 = nil
                                  end
                                  s0 << r17
                                  if r17
                                    r18 = _nt_eol
                                    s0 << r18
                                    if r18
                                      r19 = _nt_ws_eol
                                      s0 << r19
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Udt0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:udt][start_index] = r0

    r0
  end

  module Ob0
  end

  module Ob1
    def name
      elements[1]
    end

    def eol1
      elements[2]
    end

    def title
      elements[4]
    end

    def eol2
      elements[5]
    end

    def version
      elements[7]
    end

    def eol3
      elements[8]
    end

    def ob_end
      elements[10]
    end

    def eol4
      elements[11]
    end

    def ws_eol
      elements[12]
    end
  end

  def _nt_ob
    start_index = index
    if node_cache[:ob].has_key?(index)
      cached = node_cache[:ob][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('ORGANIZATION_BLOCK ', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 19))
      @index += 19
    else
      terminal_parse_failure('ORGANIZATION_BLOCK ')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_name
      s0 << r2
      if r2
        r3 = _nt_eol
        s0 << r3
        if r3
          if has_terminal?('TITLE : ', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 8))
            @index += 8
          else
            terminal_parse_failure('TITLE : ')
            r4 = nil
          end
          s0 << r4
          if r4
            r5 = _nt_title
            s0 << r5
            if r5
              r6 = _nt_eol
              s0 << r6
              if r6
                if has_terminal?('VERSION : ', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 10))
                  @index += 10
                else
                  terminal_parse_failure('VERSION : ')
                  r7 = nil
                end
                s0 << r7
                if r7
                  r8 = _nt_version
                  s0 << r8
                  if r8
                    r9 = _nt_eol
                    s0 << r9
                    if r9
                      s10, i10 = [], index
                      loop do
                        i11, s11 = index, []
                        i12 = index
                        r13 = _nt_ob_end
                        if r13
                          r12 = nil
                        else
                          @index = i12
                          r12 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s11 << r12
                        if r12
                          if index < input_length
                            r14 = instantiate_node(SyntaxNode,input, index...(index + 1))
                            @index += 1
                          else
                            terminal_parse_failure("any character")
                            r14 = nil
                          end
                          s11 << r14
                        end
                        if s11.last
                          r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                          r11.extend(Ob0)
                        else
                          @index = i11
                          r11 = nil
                        end
                        if r11
                          s10 << r11
                        else
                          break
                        end
                      end
                      r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
                      s0 << r10
                      if r10
                        r15 = _nt_ob_end
                        s0 << r15
                        if r15
                          r16 = _nt_eol
                          s0 << r16
                          if r16
                            r17 = _nt_ws_eol
                            s0 << r17
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Ob1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:ob][start_index] = r0

    r0
  end

  def _nt_name
    start_index = index
    if node_cache[:name].has_key?(index)
      cached = node_cache[:name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_quoted_name
    if r1
      r0 = r1
    else
      r2 = _nt_dbname
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:name][start_index] = r0

    r0
  end

  module QuotedName0
  end

  module QuotedName1
  end

  def _nt_quoted_name
    start_index = index
    if node_cache[:quoted_name].has_key?(index)
      cached = node_cache[:quoted_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('"', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('"')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        if has_terminal?('"', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('"')
          r5 = nil
        end
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if index < input_length
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r6 = nil
          end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(QuotedName0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?('"', false, index)
          r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('"')
          r7 = nil
        end
        s0 << r7
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(QuotedName1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:quoted_name][start_index] = r0

    r0
  end

  module DbName0
  end

  def _nt_db_name
    start_index = index
    if node_cache[:db_name].has_key?(index)
      cached = node_cache[:db_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('DB ', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('DB ')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[0-9]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(DbName0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:db_name][start_index] = r0

    r0
  end

  module Version0
  end

  def _nt_version
    start_index = index
    if node_cache[:version].has_key?(index)
      cached = node_cache[:version][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      if has_terminal?('\G[0-9]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if r1
      if has_terminal?('.', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('.')
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Version0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:version][start_index] = r0

    r0
  end

  def _nt_title
    start_index = index
    if node_cache[:title].has_key?(index)
      cached = node_cache[:title][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r1 = _nt_quoted_name
    if r1
      r0 = r1
    else
      r0 = instantiate_node(SyntaxNode,input, index...index)
    end

    node_cache[:title][start_index] = r0

    r0
  end

  def _nt_ob_end
    start_index = index
    if node_cache[:ob_end].has_key?(index)
      cached = node_cache[:ob_end][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('END_ORGANIZATION_BLOCK', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 22))
      @index += 22
    else
      terminal_parse_failure('END_ORGANIZATION_BLOCK')
      r0 = nil
    end

    node_cache[:ob_end][start_index] = r0

    r0
  end

  module Assignment0
    def ws1
      elements[0]
    end

    def identifier
      elements[1]
    end

    def ws2
      elements[2]
    end

    def value
      elements[4]
    end

    def eol
      elements[6]
    end
  end

  def _nt_assignment
    start_index = index
    if node_cache[:assignment].has_key?(index)
      cached = node_cache[:assignment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_ws
    s0 << r1
    if r1
      r2 = _nt_identifier
      s0 << r2
      if r2
        r3 = _nt_ws
        s0 << r3
        if r3
          if has_terminal?(':=', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure(':=')
            r4 = nil
          end
          s0 << r4
          if r4
            r5 = _nt_value
            s0 << r5
            if r5
              if has_terminal?(';', false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(';')
                r6 = nil
              end
              s0 << r6
              if r6
                r7 = _nt_eol
                s0 << r7
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Assignment0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:assignment][start_index] = r0

    r0
  end

  def _nt_declaration
    start_index = index
    if node_cache[:declaration].has_key?(index)
      cached = node_cache[:declaration][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_nonarray_declation
    if r1
      r0 = r1
    else
      r2 = _nt_array_declation
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:declaration][start_index] = r0

    r0
  end

  module Declaration0
    def ws
      elements[0]
    end

    def identifier
      elements[1]
    end

    def data_type
      elements[3]
    end

  end

  def _nt_declaration
    start_index = index
    if node_cache[:declaration].has_key?(index)
      cached = node_cache[:declaration][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_ws
    s0 << r1
    if r1
      r2 = _nt_identifier
      s0 << r2
      if r2
        if has_terminal?(' : ', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
          @index += 3
        else
          terminal_parse_failure(' : ')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_data_type
          s0 << r4
          if r4
            r6 = _nt_ws
            if r6
              r5 = r6
            else
              r5 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r5
            if r5
              if has_terminal?(';', false, index)
                r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(';')
                r7 = nil
              end
              s0 << r7
              if r7
                r9 = _nt_ws
                if r9
                  r8 = r9
                else
                  r8 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r8
                if r8
                  r11 = _nt_declaration_comment
                  if r11
                    r10 = r11
                  else
                    r10 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r10
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Declaration0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:declaration][start_index] = r0

    r0
  end

  module ArrayDeclaration0
    def array_comment
      elements[0]
    end

    def eol
      elements[1]
    end
  end

  module ArrayDeclaration1
    def ws
      elements[7]
    end

    def data_type
      elements[8]
    end
  end

  def _nt_array_declaration
    start_index = index
    if node_cache[:array_declaration].has_key?(index)
      cached = node_cache[:array_declaration][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('ARRAY  [', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 8))
      @index += 8
    else
      terminal_parse_failure('ARRAY  [')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[0-9]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        if has_terminal?(' .. ', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 4))
          @index += 4
        else
          terminal_parse_failure(' .. ')
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            if has_terminal?('\G[0-9]', true, index)
              r6 = true
              @index += 1
            else
              r6 = nil
            end
            if r6
              s5 << r6
            else
              break
            end
          end
          if s5.empty?
            @index = i5
            r5 = nil
          else
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          end
          s0 << r5
          if r5
            if has_terminal?(' ] OF', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 5))
              @index += 5
            else
              terminal_parse_failure(' ] OF')
              r7 = nil
            end
            s0 << r7
            if r7
              r9 = _nt_ws
              if r9
                r8 = r9
              else
                r8 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r8
              if r8
                i11, s11 = index, []
                r12 = _nt_array_comment
                s11 << r12
                if r12
                  r13 = _nt_eol
                  s11 << r13
                end
                if s11.last
                  r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                  r11.extend(ArrayDeclaration0)
                else
                  @index = i11
                  r11 = nil
                end
                if r11
                  r10 = r11
                else
                  r10 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r10
                if r10
                  r14 = _nt_ws
                  s0 << r14
                  if r14
                    r15 = _nt_data_type
                    s0 << r15
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ArrayDeclaration1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:array_declaration][start_index] = r0

    r0
  end

  def _nt_array_comment
    start_index = index
    if node_cache[:array_comment].has_key?(index)
      cached = node_cache[:array_comment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_line_comment

    node_cache[:array_comment][start_index] = r0

    r0
  end

  def _nt_declaration_comment
    start_index = index
    if node_cache[:declaration_comment].has_key?(index)
      cached = node_cache[:declaration_comment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_line_comment

    node_cache[:declaration_comment][start_index] = r0

    r0
  end

  def _nt_data_type
    start_index = index
    if node_cache[:data_type].has_key?(index)
      cached = node_cache[:data_type][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_non_array_data_type
    if r1
      r0 = r1
    else
      r2 = _nt_array_declaration
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:data_type][start_index] = r0

    r0
  end

  def _nt_non_array_data_type
    start_index = index
    if node_cache[:non_array_data_type].has_key?(index)
      cached = node_cache[:non_array_data_type][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_basic_data_type
    if r1
      r0 = r1
    else
      r2 = _nt_struct_data_type
      if r2
        r0 = r2
      else
        r3 = _nt_udt_data_type
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:non_array_data_type][start_index] = r0

    r0
  end

  module StructDataType0
    def eol1
      elements[1]
    end

    def ws
      elements[3]
    end

    def eol2
      elements[5]
    end
  end

  def _nt_struct_data_type
    start_index = index
    if node_cache[:struct_data_type].has_key?(index)
      cached = node_cache[:struct_data_type][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('STRUCT', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('STRUCT')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_eol
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          r4 = _nt_declaration
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s0 << r3
        if r3
          r5 = _nt_ws
          s0 << r5
          if r5
            if has_terminal?('END_STRUCT ;', false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 12))
              @index += 12
            else
              terminal_parse_failure('END_STRUCT ;')
              r6 = nil
            end
            s0 << r6
            if r6
              r7 = _nt_eol
              s0 << r7
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StructDataType0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:struct_data_type][start_index] = r0

    r0
  end

  def _nt_udt_data_type
    start_index = index
    if node_cache[:udt_data_type].has_key?(index)
      cached = node_cache[:udt_data_type][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_quoted_name

    node_cache[:udt_data_type][start_index] = r0

    r0
  end

  def _nt_identifier
    start_index = index
    if node_cache[:identifier].has_key?(index)
      cached = node_cache[:identifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_non_ws
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:identifier][start_index] = r0

    r0
  end

  module LineComment0
  end

  module LineComment1
  end

  def _nt_line_comment
    start_index = index
    if node_cache[:line_comment].has_key?(index)
      cached = node_cache[:line_comment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('//', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('//')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        r5 = _nt_eol
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if index < input_length
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r6 = nil
          end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(LineComment0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(LineComment1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:line_comment][start_index] = r0

    r0
  end

  def _nt_basic_data_type
    start_index = index
    if node_cache[:basic_data_type].has_key?(index)
      cached = node_cache[:basic_data_type][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('INT', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('INT')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('BOOL', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure('BOOL')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?('WORD', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 4))
          @index += 4
        else
          terminal_parse_failure('WORD')
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?('DWORD', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 5))
            @index += 5
          else
            terminal_parse_failure('DWORD')
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?('TIME_OF_DAY', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 11))
              @index += 11
            else
              terminal_parse_failure('TIME_OF_DAY')
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?('REAL', false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 4))
                @index += 4
              else
                terminal_parse_failure('REAL')
                r6 = nil
              end
              if r6
                r0 = r6
              else
                if has_terminal?('TIME', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 4))
                  @index += 4
                else
                  terminal_parse_failure('TIME')
                  r7 = nil
                end
                if r7
                  r0 = r7
                else
                  if has_terminal?('S5TIME', false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 6))
                    @index += 6
                  else
                    terminal_parse_failure('S5TIME')
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                  else
                    if has_terminal?('DATE', false, index)
                      r9 = instantiate_node(SyntaxNode,input, index...(index + 4))
                      @index += 4
                    else
                      terminal_parse_failure('DATE')
                      r9 = nil
                    end
                    if r9
                      r0 = r9
                    else
                      if has_terminal?('CHAR', false, index)
                        r10 = instantiate_node(SyntaxNode,input, index...(index + 4))
                        @index += 4
                      else
                        terminal_parse_failure('CHAR')
                        r10 = nil
                      end
                      if r10
                        r0 = r10
                      else
                        @index = i0
                        r0 = nil
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:basic_data_type][start_index] = r0

    r0
  end

  module Value0
  end

  def _nt_value
    start_index = index
    if node_cache[:value].has_key?(index)
      cached = node_cache[:value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      i2 = index
      r3 = _nt_ws
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r2
      if r2
        if index < input_length
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("any character")
          r4 = nil
        end
        s1 << r4
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(Value0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:value][start_index] = r0

    r0
  end

  module Eol0
  end

  def _nt_eol
    start_index = index
    if node_cache[:eol].has_key?(index)
      cached = node_cache[:eol][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("\r", false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("\r")
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if has_terminal?("\n", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("\n")
        r3 = nil
      end
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Eol0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:eol][start_index] = r0

    r0
  end

  def _nt_ws
    start_index = index
    if node_cache[:ws].has_key?(index)
      cached = node_cache[:ws][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      if has_terminal?(' ', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(' ')
        r2 = nil
      end
      if r2
        r1 = r2
      else
        if has_terminal?("\t", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\t")
          r3 = nil
        end
        if r3
          r1 = r3
        else
          @index = i1
          r1 = nil
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:ws][start_index] = r0

    r0
  end

  module NonWs0
  end

  def _nt_non_ws
    start_index = index
    if node_cache[:non_ws].has_key?(index)
      cached = node_cache[:non_ws][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_ws
    if r2
      r1 = nil
    else
      @index = i1
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if index < input_length
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("any character")
        r3 = nil
      end
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(NonWs0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:non_ws][start_index] = r0

    r0
  end

  def _nt_ws_eol
    start_index = index
    if node_cache[:ws_eol].has_key?(index)
      cached = node_cache[:ws_eol][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      r2 = _nt_ws
      if r2
        r1 = r2
      else
        r3 = _nt_eol
        if r3
          r1 = r3
        else
          @index = i1
          r1 = nil
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:ws_eol][start_index] = r0

    r0
  end

end

class AwlParser < Treetop::Runtime::CompiledParser
  include Awl
end

