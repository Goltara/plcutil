module PlcUtil
  module Awl
    grammar AwlGrammar
      rule root
        toplevel <TopLevelNode>
      end

      rule toplevel
        (udt <UdtNode> / db <DbNode> / ob <ObNode>)*
      end

      rule db
        'DATA_BLOCK' ws name eol
        (title / author / family / block_name / eol / ws_comments / ('VERSION : ' version eol))*
        root_struct_decl
        ws_comments*
        'BEGIN' eol
        (ws_comments / assignment)*
        'END_DATA_BLOCK' eol
        ws_eol
      end

      rule ws_comments
        (ws? line_comment? eol)
      end

      rule udt
        'TYPE ' name eol
        author?
        family?
        block_name?
        'VERSION : ' version eol
        eol*
        root_struct_decl
        'END_TYPE' eol
        ws_eol
      end

      rule ob
        'ORGANIZATION_BLOCK ' name eol
        title
        author?
        family?
        block_name?
        'VERSION : ' version eol
        eol*
        (!ob_end .)*
        ob_end eol
        ws_eol
      end

      rule name
        quoted_string <QuotedNameNode> / db_name <DbNameNode>
      end

      rule quoted_string
        '"' v:(!'"' .)* '"'
      end

      rule single_quoted_string
        single_quote (!single_quote .)* single_quote
      end

      rule single_quote
        "'"
      end

      rule db_name
        'DB' ' '? number:([0-9]+)
      end

      rule version
        [0-9]+ '.' [0-9]+
      end

      rule title
        'TITLE =' optional_title:(ws title_quoted:(quoted_string))? eol
      end

      rule author
        'AUTHOR : ' (!eol .)* eol
      end

      rule family
        'FAMILY : ' (!eol .)* eol
      end

      rule block_name
        'NAME : ' (!eol .)* eol
      end

      rule ob_end
        'END_ORGANIZATION_BLOCK'
      end

      rule assignment
        ws identifier ws ':=' ws value ';' ws eol
      end

      rule declaration
        eol*
        ws 
        identifier 
        ws ':' ws 
        d:(array_declaration <ArrayDeclarationNode> / nonarray_declaration <NonArrayDeclarationNode>)
        eol+
      end

      rule nonarray_declaration
        non_array_data_type 
        ws?
        initial_value? ws?
        ';' 
        ws? comment:(line_comment?)
      end

      rule initial_value
        ':=' ws (single_quoted_string / float)
      end

      rule array_declaration
        'ARRAY  [' ar_begin:([0-9]+) ' .. ' ar_end:([0-9]+) ' ] OF ' 
        array_comment:(line_comment eol ws)? non_array_data_type ws ';' ws
      end

      rule non_array_data_type
        basic_data_type <BasicDataTypeNode> 
        / 
        struct_data_type <StructDataTypeNode> 
        / 
        udt_data_type <UdtDataTypeNode>
      end

      rule struct_data_type
        'STRUCT' ws? struct_comment:(line_comment?) eol
        ws_comments*
        decl:declaration* 
        ws? 'END_STRUCT'
      end

      rule root_struct_decl
        ws? struct_data_type ws? ';' ws? eol
      end

      rule udt_data_type
        quoted_string
      end

      rule identifier
        non_ws+
      end

      rule line_comment
        '//' comment_body:(!eol .)*
      end

      rule basic_data_type
        ( kw_int / kw_dint / kw_bool / kw_byte / kw_word / 
          kw_dword / kw_time_of_day / kw_real / kw_time / 
          kw_s5time / kw_date / kw_char )
      end

      rule kw_int
        [Ii] [Nn] [Tt]
      end

      rule kw_dint
        [Dd] [Ii] [Nn] [Tt]
      end

      rule kw_bool
        [Bb] [Oo] [Oo] [Ll]
      end

      rule kw_byte
        [Bb] [Yy] [Tt] [Ee]
      end

      rule kw_word
        [Ww] [Oo] [Rr] [Dd]
      end

      rule kw_dword
        [Dd] [Ww] [Oo] [Rr] [Dd]
      end

      rule kw_time_of_day
        [Tt] [Ii] [Mm] [Ee] [_] [Oo] [Ff] [_] [Dd] [Aa] [Yy]
      end

      rule kw_real
        [Rr] [Ee] [Aa] [Ll]
      end

      rule kw_time
        [Tt] [Ii] [Mm] [Ee]
      end

      rule kw_s5time
        [Ss] '5' [Tt] [Ii] [Mm] [Ee]
      end

      rule kw_date
        [Dd] [Aa] [Tt] [Ee]
      end

      rule kw_char
        [Cc] [Hh] [Aa] [Rr]
      end


      rule value
        (single_quoted_string / (!(ws / ';') .)+)
      end

      rule float
        [0-9]+ "." [0-9]+ "e+" [0-9]+
      end

      rule eol
        "\r"? "\n"
      end

      rule ws
        (' ' / "\t")+
      end

      rule non_ws
        (!ws .)
      end

      rule ws_eol
        (ws / eol)+
      end
    end
  end
end
